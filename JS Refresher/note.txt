                    JAVASCRIPT - REFRESH

#
     <noscript> <noscript/>
    
    this is used when the browser has javascript diabled
    or does not support js 

#
IMPORT AND EXPORT   
    
    SIMPLE EXPORT

        -in normal vanilla JS we have to specify the file etension of the file as well
        -in case of react, react does it for us

        -"type=module"  
        - this ensures the usage of es6 and its newly introduced function   - in react after the build we dont have different files to begin with 

        export let apiKey = "oneTwoThreeFourFive"
        """"import { apiKey , secondApikey } from './one.js';"""
   
   
    EXPORT DEFAULT

        -one file one exprt default
        -we export it and  then we can respecify its name where we import it    ----  as it being single for a single file it just gets specified from there waht we are reffering to 

        we decide its name in the file when we import it -- we can name it different in every file
        in this case we dont use curly barases to 

        -component functions are normally exprted as a deafult

        function oneJsFunction(){
                console.log("keep yours eyes open")
            }

        export default oneJsFunction

        import newName from "./two.js"

    IMPORTING EVERYTING

        import * as name from "./nameoffile.js"

    like this we can import everything that an file exports including its default export and also its normal eports they can be used as
    these exports can be accessed as  ----  

        "NAME.EXPORTNAME"        //to use it by the export name specified specificallly 
        "NAME.DEAFULT"           //to use the deafult export of the file


    AS 
        it is aslo used to rename, while importing a normal export
        RENAME


TYPE FO VALUES 
    STRINGS 
    NUMBERS
    BOOLEINS
    NULL(specified by the dev) AND UNDEFINED(given as oputput)


OPERATORS 
 
    NORMAL 

    -% (Modulus - returns the remainder of a division)

    COMPARION OPERATORS

    -== (Equality)
    === (Strict equality)
    != (Inequality)
    !== (Strict inequality)
    > (Greater than)
    < (Less than)
    >= (Greater than or equal to)
    <= (Less than or equal to)


    VALUE ASSIGNING OPERATORS

    = (Assignment)
    += (Addition assignment)
    -= (Subtraction assignment)
    *= (Multiplication assignment)
    /= (Division assignment)
    %= (Modulus assignment) 

    LOGICAL OPERATORS

    && (Logical AND)
    || (Logical OR)
    ! (Logical NOT)

    UNIRAY OPERATORS

    - ++ unary incirment
    - -- unary dicrement

FUNCTION
    -just a code which will be executed later on 

    TAKES IN --- PARAMETERS
    -which basically is the value that are specific to the fuction the number of times it is called
    -they can be cahanged as many times we call the function
    -VALUES TO THE PARAMETERS -- are known as ARGUMENTS

    we can set a default value to this parameter


    WE DEFINE REACT COMPONENTS AS FUNCTIONS

ARROW functions
    -primiraly  used to make ANONYMOUS FUCNTION
    
OBJECTS 
    -using the DOT NOTAIION 
    -using BRACKET NOTATION

    IF YOU WANT TO USE THE PROPERITES OR METHOD OF THE SAME OBJECT IN THE OBJECT ---- 
        -- you have to use -> "this.propertyName" rather than "objetName.propertyName"

CALSSES 

    constrcutors
    this

    class Employee{
    constructor(name , age , height, gender){
        this.name  = name;
        this.age  = age;
        this.height = height;

            if (gender) {
                this.gender =  "male"
            }
            else {
                this.gender = "female"
            }

            }
        }

        const emplyeeOne = new Employee("burhan", 17 , 5.11 , true)

        console.log(Employee)
        console.log(emplyeeOne)


         //CLASSES in JS are used to create a Object using a constructor function peter peter pedd on the peed dog thr  

ARRAYS
    -technicallly arrays are object
    -special kinds of objects 

    *we must name the fuction or whatever in js after what it actually does*

.map
    -it out puts a new array from a previous array 

    const two = ["different" , "breed"]

    const mapedTwo = two.map((item)=> `${item} !`);
 
    console.log(mapedTwo)

    -it creates a new array while iterating on every individual value of the previous array 
    -previous array will reamin unchanged 
    -we can create an new array where  every value here is stored in the object there, objects being elements of an array


DESTRUCTURING ARRAYS
    
    -const numbers = [1, 2, 3];

    const [first, second, third] = numbers;

    console.log(first);  // 1
    console.log(second); // 2
    console.log(third);  // 3

SPREAD OPERATOR
    it basically just merges the values of the two arrays

    const skills = ["arham" , "amin" , " wani"]

    const newSkills  = ["dayyan" , "amin" , "wani"]


    const mergedSkills = [...skills, ...newSkills]
    // this will megre all the values of the arrays and forms a new array --- named mergedSkills
    console.log(mergedSkills)


    








        




    




