                            REACT
WHY REACT?
    -it is just better
    -not prone to so much bugs
    -there are pre build hooks and stuff which make the job easier 


JSX 
    -JS sytax
    -writing HTML in js is known as JSX
    -we cant directly do that as the browser engine does not allow us to do that  
    -so we need to convert this JSX into seperate files and stuff --- thats basicaly what the scripts in the react  hwlp us do 
    -jsx is not supported in the browsern --- so it getts converted by the devlopmetn server
    -react shortens the code while compinling it 

    -build porcess runs behind the scence
    -we dont need jsx. we can ues create element to do all of thi, in that case we wont require a build process 
    -

REACT-scripts
    -these scrpits are what convert the code actaully
    -vite has its own scripts and engines 
    - CRA has its own build process to convert react code into normal exicutable code
    -VITE has its own buil dprocesses to convert react code into exicutable js


                COMPONENTS

-it is just a Function
-reusable Building Blocks
-we dont have to make chages in a lot of places

        1. It should return a renderble value
        2. Function Name should start with a capital Letter

-INSIDE OF COMPOENTS THE FILE PATHS
-the path is relative to the location of the HTML file that includes your React application

-components can be written either way in one word syntax and two word syntx


OUTPUTTING CONTENT DYNAMICALLY

    -you can use JS in the HTML by using the Curly braaces notation
    -   {}      everyting in there will be used to build dynamically usabel shit


**PROPS**


    -concept of configuring components is called props 
    -any kind of value can be passes as a prop to the function 

    -PROPS keyword is used to recieve value from the CallBack
    -we dont necessarly have to name props props while recienving the value from the call back but as a part of the general syntax it ends up being named as props 

    -PROPS will pass an Object to the function -- we can acess the data from the callback directly here like -- props.name (we use the name we have named the input in the attribute in the callback --- acessing it like props.name)

    Alternative Prop Syntax

    rather than using each key value pair at a time
    -what we do is that we store it in an array than we just use the spread operator to get all the values in the array using the sytax 
        {...arrayName}
    this will pull in all the values of the array and use them here as key value pairs 
    then we can acess them directly via the name they were named  in the array

    -here in this case usign the syntax         -{nameOne , nameTwo , nameThree}
    -instead of using the props statemet or name if we use this we can dirctly recieve the value from the callback and use it here via the actuall name  --- rather than props.Name
    -name should be same as in the callback other than that it wont mathch and thus it wont work 

 it is better off to store components in a seperate file and than import them and use them as it is better for reusability


 PROPS.CHILDREN
    
    it reffers to the content between the content tags -- opening and closing
    using this value to the prop we can get the which is written in between the opening and closing syntax
    <component>  TEXT INSIDE -- TEXT INSIDE -- TEXT INSIDE <compnent/>

    while destruncturing it we do it via using the name children as it literally is a property name in this case also we have not given it the name but that is what it does 

    so just like that we have two options on our table to get the data from inside of the element
    using the simple kind were we input the text to a parameter which is set on the actaull function and then pass the value  to this parameter in the argument then we use it

    there is another way which is using the inbuilt way of using the children property and the data from inside of the operning and closing tag like that

PASSING ARAGUMENT TO THE A FUNCTION WHEN IT IS CALLED IN A everyting

    - we cant do it derectly as it will resutl in the function getting called immediatley
    -what we do is that we call the function by calling an anonymous function which wont be called immedatelty in that case

    -onClick={() => actuallFunction() } in this case the anonymous functon wont be called immediately but after it is clicked


USE STATE HOOK 

    -hooks should be called inside of the component function 
    -hooks should be called on the TOP level only 


OUTPUTTING CONTENT CODITIONALLY 

    - ? => if 
    - : => else

    - &&  and is used in a way that if the first bit of the code is true then then second bit of the code will be executed,, if not then nothing will happen
    

    comment number 11 of the day
    comment number 12 of the day

RETURN
    
    -we return a single value
    -in a simple function also we also are not able to return values in a simple function 
    -thats why we wrap this in div

FRAGMENT

    -if you want to get rid of this unecessary div in the actuall html code
    -we can use inbuilt component -- called FRAGMENT
    -we import fragment and then use it to wrap the code, in that case the div wont be showed in the acutall code but it does exist in our devloper environment

    <></>
    this shit is an alternative the same
    

TIC-TAK-TOE

    -root element in the html at the end is going to be controlled by react 
    -if we put something in the public folder we dont have to specify its location just put in the name of the file -- as it will be served with the html file in the actuall file -- very specifially the files in the pubelic folder are made availale
    
    -making the names dynamic 
    -when the edit button is pressed we want to show an input field and repalace the content in the palyer name span 
    -while we are doing the editing the edit button should change to save 

    -to use an if else state be used inside of an function we call an anonymouns function inside of the code and then make it use the if else statement --- then inside this fuction if are using full form of the if else statement we have to use RETURN inside each if else seperately but if we are using the smaller sytax we can use the return statement direcltly on the front of everting but the same thng does not work for the full version\\

    -every we call a component it creates a new instent -- thus every call back reuslts in a formation of a new instent in which the code is ran

    -there is a sytax issue in wrapping the ternary operator inside of an anonymous function it wont get executed  properly, istead we can use the simple syntax of uaing it direclty instead 

    -we dont change the state of a state variable based on its previous value directly
    -we call an anonymous functipon inside of the set state variable and then - recieve the actaull value of the variable in another variable and then we alter that variable 
    -this syntax is used because, react shedules the callback of the function based on the input
    -in this way we ensure that we always have acess to the latest value which has been provided, such that case the sates are updated correclty
    -this prevents calshes and this in general is the best prractise


    -value attribut used in the input filed overwirtes any change we want to make  and just like that making it un editable

    -using defaultValue instead just sets the inital value instead 







    
    


















